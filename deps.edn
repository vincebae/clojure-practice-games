{:paths ["src" "resources"]

 :deps
 {org.clojure/clojure {:mvn/version "1.11.3"}
  org.clojure/core.async {:mvn/version "1.3.610"}}

 ;; end of deps

 :tasks
 {:init (def MAIN-NS "my.app")
  :requires ([babashka.process :refer [process]])

  run
  {:doc "Run main function directly"
   :override-builtin true
   :task (do
           (require [(symbol MAIN-NS)])
           (apply
            (ns-resolve (find-ns (symbol MAIN-NS))
                        (symbol "-main"))
            *command-line-args*))}

  run-clj
  {:doc "Run main function through clj"
   :task (apply clojure "-M -m" MAIN-NS *command-line-args*)}

  run-uber
  {:doc "Run uberjar"
   :task (let [args *command-line-args*
               opts (if (empty? args) [] [":args" (str args)])]
           (apply clojure "-T:build run-uber" opts))}

  ;; Run all tests
  ;; $ bb test
  ;; Run a specific namespace
  ;; $ bb test -n SYMBOL  # e.g. my.app-test
  ;; Run a specific test case
  ;; $ bb test -v SYMBOL  # e.g. my.app-test/greet-test
  test
  {:doc "Run tests"
   :task (apply clojure "-M:test" *command-line-args*)}

  jar
  {:doc "Build jar"
   :task (clojure "-T:build jar")}

  uber
  {:doc "Build uberjar"
   :override-builtin true
   :task (clojure "-T:build uberjar")}

  clean
  {:doc "Clean"
   :task (clojure "-T:build clean")}

  repl
  {:doc "Start Rebel REPL"
   :override-builtin true
   :task (clojure "-T:rebel")}

  nrepl
  {:doc "Connect to nREPL"
   :task (clojure "-T:nrebel :port" (slurp ".nrepl-port"))}

  nrepl-server
  {:doc "Start nREPL server"
   :override-builtin true
   :task (clojure "-M:nrepl -m nrepl.cmdline")}}

 ;; end of tasks

 :aliases
 {;; Build tools
  :build
  {:deps {io.github.clojure/tools.build {:mvn/version "0.10.9"}
          babashka/process {:mvn/version "0.6.23"}}
   :ns-default build}

  ;; Test runner
  :test
  {:extra-paths ["test"]
   :extra-deps {io.github.cognitect-labs/test-runner {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
   :main-opts ["-m" "cognitect.test-runner"]
   :exec-fn cognitect.test-runner.api/test}

  ;; nREPL server
  :nrepl
  {:extra-deps {nrepl/nrepl {:mvn/version "1.3.1"}}}

  ;; Rebel REPL
  :rebel
  {:extra-deps {com.bhauman/rebel-readline-nrepl {:mvn/version "0.1.5"}}
   :exec-fn rebel-readline.tool/repl
   :exec-args {}
   :main-opts ["-m" "rebel-readline.main"]}

  ;; Rebel nREPL client
  :nrebel
  {:extra-deps {com.bhauman/rebel-readline-nrepl {:mvn/version "0.1.5"}}
   :exec-fn rebel-readline.nrepl/connect
   :exec-args {:background-print false} ;; Optional configuration parameters
   :main-opts ["-m" "rebel-readline.nrepl.main"]}}}

